[{"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\index.js":"1","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\App.js":"2","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Controls\\SelectedAlgorithm.js":"3","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Controls\\Controls.js":"4","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Grid\\Grid.js":"5","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Algorithms\\Dijkstra.js":"6","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Algorithms\\AStar.js":"7","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\UI\\Button.js":"8","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Grid\\Row.js":"9","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Grid\\Cell.js":"10","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\store\\controlContext.js":"11","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\store\\gridContext.js":"12"},{"size":518,"mtime":1626043634052,"results":"13","hashOfConfig":"14"},{"size":732,"mtime":1626043634031,"results":"15","hashOfConfig":"14"},{"size":708,"mtime":1626043634035,"results":"16","hashOfConfig":"14"},{"size":1768,"mtime":1626043634034,"results":"17","hashOfConfig":"14"},{"size":280,"mtime":1626043634037,"results":"18","hashOfConfig":"14"},{"size":3044,"mtime":1626043634033,"results":"19","hashOfConfig":"14"},{"size":3201,"mtime":1626043634032,"results":"20","hashOfConfig":"14"},{"size":473,"mtime":1626043634038,"results":"21","hashOfConfig":"14"},{"size":270,"mtime":1625978242681,"results":"22","hashOfConfig":"14"},{"size":1012,"mtime":1626044927714,"results":"23","hashOfConfig":"14"},{"size":3117,"mtime":1626043634043,"results":"24","hashOfConfig":"14"},{"size":1945,"mtime":1626043634048,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vwhnqq",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\index.js",[],"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\App.js",[],"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Controls\\SelectedAlgorithm.js",[],"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Controls\\Controls.js",[],"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Grid\\Grid.js",[],"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Algorithms\\Dijkstra.js",["53"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport GridContext from '../store/gridContext';\r\nimport ControlContext from '../store/controlContext';\r\n\r\nconst DijkstraAlgorithm = (props) => {\r\n\tconst { grid, setGrid, GRID_ROWS, GRID_COLS, setPlotPoint } = useContext(GridContext);\r\n\tconst { control, setControl, startEnd } = useContext(ControlContext);\r\n\r\n\tconst [ unvisited, setUnvisited ] = useState(null);\r\n\t// const [ visited, setVisited ] = useState([]);\r\n\r\n\tfunction createUnvisited() {\r\n\t\tconst defaultUnvisited = [];\r\n\r\n\t\tfor (let y of grid) {\r\n\t\t\tfor (let cell of y) {\r\n\t\t\t\tif (cell.class === '' || cell.class === 'start-end-node') {\r\n                    if (cell.vertex.toString() === startEnd.start.toString()) {\r\n                         // starting node gets a shortest distance of zero\r\n\t\t\t\t\t\tcell.shrtstDis = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdefaultUnvisited.push(cell);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn defaultUnvisited;\r\n\t}\r\n\r\n\tfunction dijkstra() {\r\n\t\tsetUnvisited((prevUnvisited) => {\r\n\t\t\tconst newUnvisited = [\r\n\t\t\t\t...prevUnvisited.sort((a, b) => (a.shrtstDis > b.shrtstDis ? 1 : b.shrtstDis > a.shrtstDis ? -1 : 0))\r\n\t\t\t];\r\n\t\t\tlet [ y, x ] = newUnvisited[0].vertex;\r\n\r\n\t\t\tsetGrid((prevGrid) => {\r\n\t\t\t\tlet newGrid = [ ...prevGrid ];\r\n\t\t\t\tnewGrid = checkNeighbourCell(newGrid, y, x, y - 1, x);\r\n\t\t\t\tnewGrid = checkNeighbourCell(newGrid, y, x, y + 1, x);\r\n\t\t\t\tnewGrid = checkNeighbourCell(newGrid, y, x, y, x - 1);\r\n\t\t\t\tnewGrid = checkNeighbourCell(newGrid, y, x, y, x + 1);\r\n\r\n\t\t\t\tif (newGrid[y][x].class === '') {\r\n\t\t\t\t\tnewGrid[y][x].class = 'visited';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (y === startEnd.end[0] && x === startEnd.end[1]) {\r\n\t\t\t\t\tsetControl('plotLine');\r\n\t\t\t\t\tsetPlotPoint({ ...newGrid[y][x].prevVertex });\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn newGrid;\r\n\t\t\t});\r\n\r\n\t\t\t// setVisited((prevValue) => {\r\n\t\t\t// \treturn [ ...prevValue, newUnvisited[0] ];\r\n\t\t\t// });\r\n\r\n\t\t\tnewUnvisited.shift();\r\n\t\t\treturn newUnvisited;\r\n\t\t});\r\n\t}\r\n\r\n\tfunction checkNeighbourCell(newGrid, y, x, neighbourY, neighbourX) {\r\n\t\t// If beyond grid limits, pass\r\n\t\tif (neighbourY < 0 || neighbourY >= GRID_ROWS || neighbourX < 0 || neighbourX >= GRID_COLS) {\r\n\t\t\treturn newGrid;\r\n\t\t}\r\n\r\n\t\tif (newGrid[y][x].shrtstDis + 1 < newGrid[neighbourY][neighbourX].shrtstDis) {\r\n\t\t\tnewGrid[neighbourY][neighbourX].shrtstDis = grid[y][x].shrtstDis + 1;\r\n\t\t\tnewGrid[neighbourY][neighbourX].prevVertex = { y: y, x: x };\r\n\t\t\treturn newGrid;\r\n\t\t}\r\n\t\treturn newGrid;\r\n\t}\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconsole.log(control);\r\n\t\t\tif (control === 'solve') {\r\n\t\t\t\tif (unvisited === null) setUnvisited(createUnvisited());\r\n\t\t\t\telse if (unvisited.length === 0) return;\r\n\t\t\t\telse {\r\n\t\t\t\t\tsetTimeout(dijkstra, 20);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (control === 'start-end-node') {\r\n\t\t\t\tsetUnvisited(null);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ control, unvisited ]\r\n\t);\r\n\r\n\treturn <React.Fragment>{props.children}</React.Fragment>;\r\n};\r\n\r\n/**This Component is fully contained & simply needs to be used as a wrapper to function (I've wrapped it in index.js under 'SelectedAlgorithm' component) */\r\nexport default DijkstraAlgorithm;\r\n","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Algorithms\\AStar.js",["54"],"/** This code is built on top of Dijkstra with just a few modifications */\r\n\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport GridContext from '../store/gridContext';\r\nimport ControlContext from '../store/controlContext';\r\n\r\nconst AStarAlgorithm = (props) => {\r\n\tconst { grid, setGrid, GRID_ROWS, GRID_COLS, setPlotPoint } = useContext(GridContext);\r\n\tconst { control, setControl, startEnd } = useContext(ControlContext);\r\n\r\n\tconst [ unvisited, setUnvisited ] = useState(null);\r\n\r\n\tfunction createUnvisited() {\r\n        const defaultUnvisited = [];\r\n        \r\n        /**gCost is distance to start, \r\n         * hCost is distance to end \r\n         * fCost is gCost + hCost*/\r\n\r\n\t\tfor (let y of grid) {\r\n            for (let cell of y) {\r\n                \r\n                cell.gCost = Infinity\r\n                cell.hCost = Math.abs(startEnd.end[0] - cell.y) + Math.abs(startEnd.end[1] - cell.x)\r\n                \r\n                if (cell.class === '' || cell.class === 'start-end-node') {\r\n                    // give the starting node a gCost of zero\r\n\t\t\t\t\tif (cell.vertex.toString() === startEnd.start.toString()) {\r\n\t\t\t\t\t\tcell.gCost = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdefaultUnvisited.push(cell);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn defaultUnvisited;\r\n\t}\r\n\r\n\tfunction aStar() {\r\n\t\tsetUnvisited((prevUnvisited) => {\r\n\t\t\tconst newUnvisited = [\r\n\t\t\t\t...prevUnvisited.sort((a, b) => (a.fCost > b.fCost ? 1 : b.fCost > a.fCost ? -1 : 0))\r\n\t\t\t];\r\n\t\t\tlet [ y, x ] = newUnvisited[0].vertex;\r\n\r\n\t\t\tsetGrid((prevGrid) => {\r\n\t\t\t\tlet newGrid = [ ...prevGrid ];\r\n\t\t\t\tnewGrid = checkNeighbourCell(newGrid, y, x, y - 1, x);\r\n\t\t\t\tnewGrid = checkNeighbourCell(newGrid, y, x, y + 1, x);\r\n\t\t\t\tnewGrid = checkNeighbourCell(newGrid, y, x, y, x - 1);\r\n\t\t\t\tnewGrid = checkNeighbourCell(newGrid, y, x, y, x + 1);\r\n\r\n\t\t\t\tif (newGrid[y][x].class === '') {\r\n\t\t\t\t\tnewGrid[y][x].class = 'visited';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (y === startEnd.end[0] && x === startEnd.end[1]) {\r\n\t\t\t\t\tsetControl('plotLine');\r\n\t\t\t\t\tsetPlotPoint({ ...newGrid[y][x].prevVertex });\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn newGrid;\r\n\t\t\t});\r\n\r\n\t\t\tnewUnvisited.shift();\r\n\t\t\treturn newUnvisited;\r\n\t\t});\r\n\t}\r\n\r\n\tfunction checkNeighbourCell(newGrid, y, x, neighbourY, neighbourX) {\r\n\t\t// If beyond grid limits, pass\r\n\t\tif (neighbourY < 0 || neighbourY >= GRID_ROWS || neighbourX < 0 || neighbourX >= GRID_COLS) {\r\n\t\t\treturn newGrid;\r\n\t\t}\r\n\r\n\t\tif (newGrid[y][x].gCost + 1 < newGrid[neighbourY][neighbourX].gCost) {\r\n\t\t\tnewGrid[neighbourY][neighbourX].gCost = grid[y][x].gCost + 1;\r\n\t\t\tnewGrid[neighbourY][neighbourX].prevVertex = { y: y, x: x };\r\n\t\t\treturn newGrid;\r\n\t\t}\r\n\t\treturn newGrid;\r\n\t}\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tif (control === 'solve') {\r\n\t\t\t\tif (unvisited === null) setUnvisited(createUnvisited());\r\n\t\t\t\telse if (unvisited.length === 0) return;\r\n\t\t\t\telse {\r\n\t\t\t\t\tsetTimeout(aStar, 20);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (control === 'start-end-node') {\r\n\t\t\t\tsetUnvisited(null);\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ control, unvisited ]\r\n\t);\r\n\r\n\treturn <React.Fragment>{props.children}</React.Fragment>;\r\n};\r\n\r\n/**This Component is fully contained & simply needs to be used as a wrapper to function (I've wrapped it in index.js under 'SelectedAlgorithm' component) */\r\nexport default AStarAlgorithm;\r\n","C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\UI\\Button.js",[],"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Grid\\Row.js",[],["55","56"],"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\Grid\\Cell.js",[],"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\store\\controlContext.js",[],"C:\\Users\\Donny\\CODING\\Donny's Personal Projects\\Web Development\\React\\React Grid Path Finder\\src\\components\\store\\gridContext.js",[],{"ruleId":"57","severity":1,"message":"58","line":94,"column":3,"nodeType":"59","endLine":94,"endColumn":25,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":98,"column":3,"nodeType":"59","endLine":98,"endColumn":25,"suggestions":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createUnvisited' and 'dijkstra'. Either include them or remove the dependency array.","ArrayExpression",["67"],"React Hook useEffect has missing dependencies: 'aStar' and 'createUnvisited'. Either include them or remove the dependency array.",["68"],"no-native-reassign",["69"],"no-negated-in-lhs",["70"],{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [control, createUnvisited, dijkstra, unvisited]",{"range":"75","text":"76"},"Update the dependencies array to be: [aStar, control, createUnvisited, unvisited]",{"range":"77","text":"78"},[2754,2776],"[control, createUnvisited, dijkstra, unvisited]",[2914,2936],"[aStar, control, createUnvisited, unvisited]"]